const { createHash } = require('crypto');
const axios = require('axios');
const { array } = require('joi');
const validator = require('validator');
const { sequelizeTransaction } = require('../services/sequelizeTransaction.service');
const model = require('./../models/index')


exports.opdRegistrationPayment = async (req, res, next) => {
    const transaction = await sequelizeTransaction()
    try {
        let { fixedTxnAmount,emailorPhoneNumber, organizationId, businessId, groupId } = req.body

        emailorPhoneNumber += ''
        //  merchantId   : 'y5ABgiIXkP1l7c',
        // merchantKey :'10730c15-1e9c-401a-b1e9-2c49d7e4109d'
        let isMobile = validator.isMobilePhone(emailorPhoneNumber, 'en-IN')
        let isEmail = validator.isEmail(emailorPhoneNumber)
        if(!isMobile && !isEmail)
        {
            return res.send(
                {
                    error : true,
                    status : 200,
                    message : 'Please provide valid email or phone number.'
                }
            )
        }
        

        let paymentGatewayPayload = {
            fixedTxnAmount: parseFloat(fixedTxnAmount || ""),
            maximumTxnAmount: parseFloat(fixedTxnAmount || ""),
            merchantId: 'y5ABgiIXkP1l7c',
            productType: 'PAYMENTLINK',
            transactionOpenForAll: true,
        }

        const checksum = createHash('sha256')
            .update(JSON.stringify(paymentGatewayPayload) + '10730c15-1e9c-401a-b1e9-2c49d7e4109d').digest('hex');

        paymentGatewayPayload.checksum = checksum


        let paymentLink = {
            checksum: checksum,
            fixedTxnAmount: parseFloat(fixedTxnAmount || ""),
            maximumTxnAmount: parseFloat(fixedTxnAmount || ""),
            merchantId: 'y5ABgiIXkP1l7c',
            productType: 'PAYMENTLINK',
            transactionOpenForAll: true,
        }
        /**Axios return in .data property */
         let checkSumResponse = await axios({
            method: 'post',
            url: 'https://checkout.freecharge.in/api/v1/co/payment_link/create',
            data: paymentLink
          })
          
        // Generated Link
        const linkGenerated = checkSumResponse?.data?.shortenLinkUrl
        const fcLinkId = checkSumResponse?.data?.fcLinkId
        

        if(!linkGenerated || !fcLinkId)
        {
            return res.send(
                {
                    error : true,
                    status : 200,
                    message : 'Link could not be generated, please try again later.'
                }
            )
        }

        let link = {
            fcLinkId: fcLinkId,
            merchantId: 'y5ABgiIXkP1l7c',
            shareData:[
                {
                id:emailorPhoneNumber,
                type: isMobile ? "MOBILE" : "EMAIL"
            }
        ]
        }

        const checksumSMS = createHash('sha256').update(JSON.stringify(link) +  '10730c15-1e9c-401a-b1e9-2c49d7e4109d').digest('hex');
        link.checksum =  checksumSMS;
        
       
        let verification = await axios({
            method: 'post',
            url: 'https://checkout.freecharge.in/api/v1/co/payment_link/share',
            data: link
            })
        
        const savedPaymentInDB = await model.hmspaymentData.create(
            {
                organizationId : organizationId,
                businessId : businessId, 
                groupId : groupId,
                emailOrPhoneNumber : emailorPhoneNumber,
                amount : fixedTxnAmount,
                paymentType : "link",
                fcLinkId : fcLinkId,
                paymentStatus : 0,
                isVerified : 0,
                hospitalNumber : 0,
                ipOrOpNumber : 0,
                visitNumber : 0,
                isActive : 1,
                isDeleted : 0

            },
            {transaction}
        )

        const QRCodeGenerator = await import('qrcode');
        const QRCodeImage = await QRCodeGenerator.toDataURL(linkGenerated);

        await transaction.commit()
        return await res.send({
            error: false,
            status: 200,
            message: "Check your inbox/spam for the link ",
            result: verification.data,
            qrCodeUrl : QRCodeImage,
            fcLinkId : fcLinkId
        })
    }
    catch (error) {
        console.log(error)
        await transaction.rollback()
         next(error)
    }
    finally
    {
        if (res.headersSent == false) {
            res.status(400).send(
               {
                   error: true,
                   status: 200,
                   message: 'something went wrong.'
               }
           )
       }

    }

}

//*** Transaction Status****//
exports.verifyPayment = async (req, res, next) => {
    try {
        const {  fcLinkId } = req.body

        let paymentDone = {
            fcLinkId: fcLinkId,
            merchantId: 'y5ABgiIXkP1l7c',
        }
        

        const checksum = createHash('sha256').update(JSON.stringify(paymentDone) + '10730c15-1e9c-401a-b1e9-2c49d7e4109d').digest('hex');
        paymentDone.checksum = checksum;
        
        let SuccessMessage = {
            fcLinkId: fcLinkId,
            merchantId: 'y5ABgiIXkP1l7c',
            checksum: checksum,

        }
        const verification = await axios.post('https://checkout.freecharge.in/api/v1/co/payment_link/transactions', SuccessMessage);
        const paymentResponse = verification?.data
        if(!paymentResponse)
        {

            return res.send(
                {
                    error : true,
                    message : 'could not verify payment , please try again.'
                }
            )
        }

        else
        {
            const page = paymentResponse?.page?.content
            
            if(page.length === 0)
            {
                return res.send(
                    {
                        error : true,
                        message : 'There was no payment attempt.'
                    }
                )
            }
            else
            {
                let status = "FAILED"
                for(let i = 0 ; i < page.length; i++)
                {
                    if(page?.[i]?.status === "SUCCESS")
                    {
                        status = "SUCCESS"
                    }
                }
                if(status === "SUCCESS")
                {
                    return res.send(
                        {
                            error : false,
                            status : 200,
                            message : 'Payment Success',
                            success : true 
                        }
                    )
                }
                else
                {
                    return res.send(
                        {
                            error : true,
                            status : 200,
                            message : 'Payment failed.'
                        }
                    )
                }
            }
        }


    } catch (error) {
        return res.send(error)
    }
}

